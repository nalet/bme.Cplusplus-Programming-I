#include "ex2_2.h"
#include <iostream>

void ex2_2()
{
    std::cout << "For each of the following programs, determine what they output," << std::endl;
    std::cout << "or if they would not compile, indicate why."                     << std::endl;
    std::cout << "-------------------------------a)------------------------------" << std::endl;
    std::cout << "#include <iostream>                                            " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "class Base {                                                   " << std::endl;
    std::cout << "public:                                                        " << std::endl;
    std::cout << "    Base()                                                     " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \" Base ()\\n\";                          " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "    ~Base()                                                    " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \"~ Base ()\\n\";                          " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "};                                                             " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "class Derived : public Base {                                  " << std::endl;
    std::cout << "public:                                                        " << std::endl;
    std::cout << "    Derived()                                                  " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \" Derived ()\\n\";                       " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "    ~Derived()                                                 " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \"~ Derived ()\\n\";                      " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "};                                                             " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "int main()                                                     " << std::endl;
    std::cout << "{                                                              " << std::endl;
    std::cout << "    Derived d;                                                 " << std::endl;
    std::cout << "    Base b;                                                    " << std::endl;
    std::cout << "}                                                              " << std::endl;
    std::cout << "---------------------------------------------------------------" << std::endl;
    std::cout << "Answer: The programm compiles correctly, the output is:        " << std::endl;
    std::cout << "        Base (), Derived (), Base (),~ Base (),~ Derived (),   " << std::endl;
    std::cout << "        ~ Base ()                                              " << std::endl;
    std::cout << "-------------------------------b)------------------------------" << std::endl;
    std::cout << "#include <iostream >                                           " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "class Base {                                                   " << std::endl;
    std::cout << "private:                                                       " << std::endl;
    std::cout << "    int m_x;                                                   " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "public:                                                        " << std::endl;
    std::cout << "    Base(int x)                                                " << std::endl;
    std::cout << "        : m_x(x)                                               " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \" Base ()\\n\";                          " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "    ~Base()                                                    " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \"~ Base ()\\n\";                         " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "    void print() { std::cout << \" Base : \" << m_x << \"\\n\"; }" << std::endl;
    std::cout << "};                                                             " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "class Derived : public Base {                                  " << std::endl;
    std::cout << "public:                                                        " << std::endl;
    std::cout << "    Derived(int y)                                             " << std::endl;
    std::cout << "        : Base(y)                                              " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \" Derived ()\\n\";                       " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "    ~Derived()                                                 " << std::endl;
    std::cout << "    {                                                          " << std::endl;
    std::cout << "        std::cout << \"~ Derived ()\\n\";                      " << std::endl;
    std::cout << "    }                                                          " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "    void print() { std::cout << \" Derived : \" << m_x << \"\\n\"; }" << std::endl;
    std::cout << "};                                                             " << std::endl;
    std::cout << "                                                               " << std::endl;
    std::cout << "int main()                                                     " << std::endl;
    std::cout << "{                                                              " << std::endl;
    std::cout << "    Derived d(5);                                              " << std::endl;
    std::cout << "    d.print();                                                 " << std::endl;
    std::cout << "}                                                              " << std::endl;
    std::cout << "---------------------------------------------------------------" << std::endl;
    std::cout << "Answer: The programm would not compile, because the member m_x " << std::endl;
    std::cout << "        is private. When the member m_x in base would change to" << std::endl;
    std::cout << "        protected, the output would be: Base (); Derived ()    " << std::endl;
    std::cout << "        Derived : 5, ~ Derived (), ~ Base ()                   " << std::endl;
}
